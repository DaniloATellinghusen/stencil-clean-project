/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * @nativeEvent click  - dispatched when button was clicked
     */
    interface MyButton {
        /**
          * deactivates the button
         */
        "disabled": boolean;
        /**
          * optionally specifies the new filename for the downloaded file if a url is specified.
         */
        "download": string;
        /**
          * icon name e.g. 'clock-24'. Use the following matching icon sizes for the different button sizes: s: 16px m: 24px l: 32px
         */
        "icon": string;
        /**
          * value of the button. This is the value that will be submitted if the button is placed inside a form.
         */
        "value": string;
    }
    /**
     * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
     * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
     * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
     */
    interface MyInput {
        /**
          * determines which brand to use.
         */
        "brand": string;
        /**
          * sets input-field to readonly
         */
        "disabled": boolean;
        /**
          * name of the input element to support forms
         */
        "name": string;
        /**
          * placeholder of the input-field<br>
         */
        "placeholder": string;
        /**
          * toggles readonly mode
         */
        "readonly": boolean;
        /**
          * specifies the type of input element
         */
        "type": string;
        /**
          * value of the input-field
         */
        "value": string;
    }
}
declare global {
    /**
     * @nativeEvent click  - dispatched when button was clicked
     */
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    /**
     * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
     * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
     * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
     */
    interface HTMLMyInputElement extends Components.MyInput, HTMLStencilElement {
    }
    var HTMLMyInputElement: {
        prototype: HTMLMyInputElement;
        new (): HTMLMyInputElement;
    };
    interface HTMLElementTagNameMap {
        "my-button": HTMLMyButtonElement;
        "my-input": HTMLMyInputElement;
    }
}
declare namespace LocalJSX {
    /**
     * @nativeEvent click  - dispatched when button was clicked
     */
    interface MyButton {
        /**
          * deactivates the button
         */
        "disabled"?: boolean;
        /**
          * optionally specifies the new filename for the downloaded file if a url is specified.
         */
        "download"?: string;
        /**
          * icon name e.g. 'clock-24'. Use the following matching icon sizes for the different button sizes: s: 16px m: 24px l: 32px
         */
        "icon"?: string;
        /**
          * value of the button. This is the value that will be submitted if the button is placed inside a form.
         */
        "value"?: string;
    }
    /**
     * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
     * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
     * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
     */
    interface MyInput {
        /**
          * determines which brand to use.
         */
        "brand"?: string;
        /**
          * sets input-field to readonly
         */
        "disabled"?: boolean;
        /**
          * name of the input element to support forms
         */
        "name"?: string;
        /**
          * placeholder of the input-field<br>
         */
        "placeholder"?: string;
        /**
          * toggles readonly mode
         */
        "readonly"?: boolean;
        /**
          * specifies the type of input element
         */
        "type"?: string;
        /**
          * value of the input-field
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "my-button": MyButton;
        "my-input": MyInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @nativeEvent click  - dispatched when button was clicked
             */
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            /**
             * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
             * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
             * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
             */
            "my-input": LocalJSX.MyInput & JSXBase.HTMLAttributes<HTMLMyInputElement>;
        }
    }
}
