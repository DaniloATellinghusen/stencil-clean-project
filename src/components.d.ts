/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
     * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
     * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
     */
    interface GroupuiInput {
        /**
          * sets focus automatically
         */
        "autofocus": boolean;
        /**
          * determines which brand to use.
         */
        "brand": string;
        /**
          * shows the description only when the component has focus
         */
        "descriptionOnlyOnFocus": boolean;
        /**
          * sets input-field to readonly
         */
        "disabled": boolean;
        /**
          * determines whether maxlength should prevent input of any more characters (html default behavior)
         */
        "htmlMaxlengthBehavior": boolean;
        /**
          * color of the icon
         */
        "iconColor": string;
        /**
          * maximum value to accept for this input. To be used with type=number
         */
        "max": number | string;
        /**
          * sets the maximum amount of characters of the input-field
         */
        "maxlength": number;
        /**
          * minimum value to accept for this input. To be used with type=number
         */
        "min": number | string;
        /**
          * sets the minimum amount of characters of the input-field
         */
        "minlength": number;
        /**
          * name of the input element to support forms
         */
        "name": string;
        /**
          * disable internal validation
         */
        "noValidation": boolean;
        /**
          * a pattern which will be covered by validity
         */
        "pattern": string;
        /**
          * placeholder of the input-field<br> ❗❗ applicable only to: VWAG
         */
        "placeholder": string;
        /**
          * toggles readonly mode
         */
        "readonly": boolean;
        /**
          * specifies that an input must be filled out before submitting the form
         */
        "required": boolean;
        /**
          * style attribute
         */
        "severity": any;
        /**
          * show clear icon to clear the input field
         */
        "showClearIcon": boolean;
        /**
          * show status icon on severity danger, warning, success
         */
        "showStatusIcon": boolean;
        /**
          * specifies the type of input element
         */
        "type": string;
        /**
          * a string with placeholder about count of available and used characters. Works only  in combination with maxlength. Possible values:  {characters-used}  {characters-left}  {characters-max} e.g.:    '{characters-used} characters used'    '{characters-left} characters left'    '{characters-used}/{characters-max}'
         */
        "typingInfoTemplate": string;
        /**
          * function to trigger component validation manually
         */
        "validate": () => Promise<void>;
        /**
          * returns the element's current validityState state (readonly value)
          * @deprecated use the validity state returned in `groupuiInvalid` event
         */
        "validity": ValidityState;
        /**
          * value of the input-field
         */
        "value": string;
    }
}
export interface GroupuiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGroupuiInputElement;
}
declare global {
    /**
     * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
     * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
     * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
     */
    interface HTMLGroupuiInputElement extends Components.GroupuiInput, HTMLStencilElement {
    }
    var HTMLGroupuiInputElement: {
        prototype: HTMLGroupuiInputElement;
        new (): HTMLGroupuiInputElement;
    };
    interface HTMLElementTagNameMap {
        "groupui-input": HTMLGroupuiInputElement;
    }
}
declare namespace LocalJSX {
    /**
     * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
     * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
     * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
     */
    interface GroupuiInput {
        /**
          * sets focus automatically
         */
        "autofocus"?: boolean;
        /**
          * determines which brand to use.
         */
        "brand"?: string;
        /**
          * shows the description only when the component has focus
         */
        "descriptionOnlyOnFocus"?: boolean;
        /**
          * sets input-field to readonly
         */
        "disabled"?: boolean;
        /**
          * determines whether maxlength should prevent input of any more characters (html default behavior)
         */
        "htmlMaxlengthBehavior"?: boolean;
        /**
          * color of the icon
         */
        "iconColor"?: string;
        /**
          * maximum value to accept for this input. To be used with type=number
         */
        "max"?: number | string;
        /**
          * sets the maximum amount of characters of the input-field
         */
        "maxlength"?: number;
        /**
          * minimum value to accept for this input. To be used with type=number
         */
        "min"?: number | string;
        /**
          * sets the minimum amount of characters of the input-field
         */
        "minlength"?: number;
        /**
          * name of the input element to support forms
         */
        "name"?: string;
        /**
          * disable internal validation
         */
        "noValidation"?: boolean;
        /**
          * for react user only - use this instead of the native change event
         */
        "onGroupuiChange"?: (event: GroupuiInputCustomEvent<void>) => void;
        /**
          * is dispatched if the clear icon is clicked
         */
        "onGroupuiClearClicked"?: (event: GroupuiInputCustomEvent<void>) => void;
        /**
          * dispatched when component finished loading
         */
        "onGroupuiDidLoad"?: (event: GroupuiInputCustomEvent<void>) => void;
        /**
          * is dispatched when the value is invalid
         */
        "onGroupuiInvalid"?: (event: GroupuiInputCustomEvent<ValidityState>) => void;
        /**
          * a pattern which will be covered by validity
         */
        "pattern"?: string;
        /**
          * placeholder of the input-field<br> ❗❗ applicable only to: VWAG
         */
        "placeholder"?: string;
        /**
          * toggles readonly mode
         */
        "readonly"?: boolean;
        /**
          * specifies that an input must be filled out before submitting the form
         */
        "required"?: boolean;
        /**
          * style attribute
         */
        "severity"?: any;
        /**
          * show clear icon to clear the input field
         */
        "showClearIcon"?: boolean;
        /**
          * show status icon on severity danger, warning, success
         */
        "showStatusIcon"?: boolean;
        /**
          * specifies the type of input element
         */
        "type"?: string;
        /**
          * a string with placeholder about count of available and used characters. Works only  in combination with maxlength. Possible values:  {characters-used}  {characters-left}  {characters-max} e.g.:    '{characters-used} characters used'    '{characters-left} characters left'    '{characters-used}/{characters-max}'
         */
        "typingInfoTemplate"?: string;
        /**
          * returns the element's current validityState state (readonly value)
          * @deprecated use the validity state returned in `groupuiInvalid` event
         */
        "validity"?: ValidityState;
        /**
          * value of the input-field
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "groupui-input": GroupuiInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @nativeEvent click - dispatched when input was clicked => 'event.target.value' delivers the current value
             * @nativeEvent change - dispatched when input has changed => 'event.target.value' delivers the current value
             * @nativeEvent invalid - dispatched when input is invalid => 'event.target.value' delivers the invalid value
             */
            "groupui-input": LocalJSX.GroupuiInput & JSXBase.HTMLAttributes<HTMLGroupuiInputElement>;
        }
    }
}
